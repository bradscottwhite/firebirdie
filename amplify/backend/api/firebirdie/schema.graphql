type User @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
		@index(name: "byOwner", queryField: "getUserByOwner")
	username: String! @index(name: "byUsername", queryField: "getUserByUsername")
	name: String!
	avatar: String!
	bio: String
	posts: [Post] @hasMany
	comments: [Comment] @hasMany
	postLikes: [PostLike] @hasMany
# more fields ...
}

type Post @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	body: String!
	postTime: AWSDateTime!
	author: User @belongsTo
	comments: [Comment] @hasMany
	likes: [PostLike] @hasMany
}

type PostLike @model
	@auth(rules: [
		{ allow: owner, operations: [read, create, delete] },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	postId: ID! @index(name: "byPostId", queryField: "listPostLikesByPostId")
	post: Post @belongsTo
}

# make comments like posts???
type Comment @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	body: String!
	postTime: AWSDateTime!
	author: User @belongsTo
	post: Post @belongsTo
	postId: ID! @index(name: "byPostId", queryField: "listCommentsByPostId")
	likes: [CommentLike] @hasMany
}

type CommentLike @model
	@auth(rules: [
		{ allow: owner, operations: [read, create, delete] },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	commentId: ID! @index(name: "byCommentId", queryField: "listCommentLikesByCommentId")
	comment: Comment @belongsTo
}
 