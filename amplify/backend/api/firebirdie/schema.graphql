type User @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	username: String! @index(name: "byUsername", queryField: "getUserByUsername")
	name: String!
	avatar: String!
	bio: String
	posts: [Post] @hasMany
	comments: [Comment] @hasMany
	postLikes: [PostLike] @hasMany
	color: String
# more fields ...
	following: [Follow] @hasMany
	#followers?
}

type Follow @model
	@auth(rules: [
		{ allow: owner, operations: [read, create, delete] },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	user: User @belongsTo
	userId: String! @index(name: "byUserId", queryField: "listFollowsByUserId")
	
	# Id of person following:
	followId: ID! @index(name: "byFollowId", queryField: "listFollowsByFollowId")
}


type Post @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
		#@index(name: "byOwner", queryField: "listPostsByOwner")
	body: String!
	postTime: AWSDateTime!
	author: User @belongsTo
	authorId: String! @index(name: "byAuthorId", queryField: "listPostsByAuthorId")
	comments: [Comment] @hasMany
	likes: [PostLike] @hasMany
}

type PostLike @model
	@auth(rules: [
		{ allow: owner, operations: [read, create, delete] },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	postId: ID! @index(name: "byPostId", queryField: "listPostLikesByPostId")
	post: Post @belongsTo
}

# make comments like posts???
type Comment @model
	@auth(rules: [
		{ allow: owner },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	body: String!
	postTime: AWSDateTime!
	author: User @belongsTo
	authorId: String! @index(name: "byAuthorId", queryField: "listCommentsByAuthorId")
	post: Post @belongsTo
	postId: ID! @index(name: "byPostId", queryField: "listCommentsByPostId")
	likes: [CommentLike] @hasMany
}

type CommentLike @model
	@auth(rules: [
		{ allow: owner, operations: [read, create, delete] },
		{ allow: public, operations: [read] }
	])
{
	id: ID!
	owner: String
		@auth(rules: [
			{ allow: owner, operations: [read, delete] },
			{ allow: public, operations: [read] }
		])
	commentId: ID! @index(name: "byCommentId", queryField: "listCommentLikesByCommentId")
	comment: Comment @belongsTo
}
 
         
 